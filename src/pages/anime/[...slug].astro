---
import Layout from "../../layouts/Layout.astro";
import CenteredContainer from "../../components/CenteredContainer.astro";
import { getAnimeEntry } from "../../lib/db.js";
import { getAnimeFromList, numberToStatus } from "../../lib/manage.js";

let AnimeID = Astro.params.slug;
let Anime = await getAnimeEntry(AnimeID);
if (!Anime) return Astro.redirect("/not-found?from=" + AnimeID);

let isUserLoggedIn = false;
let token = Astro.cookies.get("VanadiumToken").value;
if (token) {
	isUserLoggedIn = true;
}

let listItem = await getAnimeFromList(AnimeID, token);

let episodeMapArr = [];
for (let i = 0; i < Anime.Episodes; i++) {
	episodeMapArr.push(i + 1);
}
---

<style is:inline>
	.container {
		color: white;
	}
</style>

<style>
	.top {
		display: flex;
		gap: 20px;
	}
	.anime-right {
		text-align: left;
		width: 70%;
	}
	.offset {
		height: 4rem;
	}
	p {
		margin: 0.5rem 0;
	}
	a {
		padding: 0.5rem;
		padding-right: 5rem;
		padding-left: 5rem;
		border-radius: 5px;
		text-decoration: none;
		background-color: var(--accent);
		text-align: center;
		color: black;
		text-decoration: none;
		font-weight: bolder;
	}
	a:hover {
		background-color: var(--accent-dark);
		color: var(--accent);
	}
	.episodes {
		display: flex;
		flex-wrap: wrap;
		gap: 25px;
		margin: 1rem 0;
	}
	.episodes div {
		width: 300px;
	}
	button {
		padding: 0.5rem;
		border-radius: 5px;
		border: none;
		background-color: dodgerblue;
		color: white;
		font-weight: bolder;
	}
	.actions {
		display: flex;
		gap: 10px;
	}
	/* mobile */
	@media (max-width: 768px) {
		.top {
			flex-direction: column;
		}
		.anime-right {
			width: 100%;
		}
		.anime-left {
			width: 100%;
			text-align: center;
			/* smaller img */
			img {
				width: 100%;
			}
		}
		.episodes {
			margin: 2rem 0;
		}
	}
</style>

<Layout name={Anime.Title}>
	<CenteredContainer>
		<div class="offset"></div>
		<div class="top">
			<div class="anime-left">
				<img src={Anime.Image} alt={Anime.Title} />
			</div>
			<div class="anime-right">
				<h1>{Anime.Title}</h1>
				{
					Anime.Description != "N/A" && (
						<p>
							<b>Description: </b> {Anime.Description}
						</p>
					)
				}
				{
					Anime.Date != "N/A" && (
						<p>
							<b>Date: </b> {Anime.Date}
						</p>
					)
				}
				{
					Anime.Aliases != "N/A" && (
						<p>
							<b>Aliases: </b> {Anime.Aliases}
						</p>
					)
				}
				{
					!Anime.Genres.includes("N/A") && (
						<p>
							<b>Genres: </b> {Anime.Genres}
						</p>
					)
				}
				{
					listItem && (
						<>
							<p>
								<b style="color: dodgerblue">Current Episode: </b> {listItem.CurrentEpisode}{" "}
							</p>
							<p>
								<b style="color:dodgerblue;">Status: </b> {numberToStatus(listItem.Status)}
							</p>
						</>
					)
				}
				<div class="actions">
					{listItem && <button>Edit Information</button>}
					{isUserLoggedIn && <div>{listItem ? <button onclick="action('removeFromList')">Remove From List</button> : <button onclick="action('addToList')">Add To List</button>}</div>}
				</div>
				<div class="episodes">
					{
						episodeMapArr.map((episode) => (
							<div class="episode">
								<a href={"/view/" + AnimeID + "-episode-" + episode}>Episode {episode}</a>
							</div>
						))
					}
				</div>
			</div>
		</div>
	</CenteredContainer>
</Layout>

<!-- pocetak debilnosti astro kreatora, majke mi zasto oni ovo ovak rade -->
<script define:vars={{ token, AnimeID }} is:inline>
	window.token = token;
	window.AnimeID = AnimeID;
</script>

<script is:inline>
	function action(action) {
		let data = new FormData();
		data.append("action", action);
		data.append("AnimeID", window.AnimeID);
		fetch("/api/action", {
			method: "POST",
			headers: {
				Authorization: "Bearer " + window.token,
			},
			body: data,
		})
			.then((res) => res.json())
			.then((data) => {
				window.location.reload();
			});
	}
</script>
<!-- boze dragi -->
